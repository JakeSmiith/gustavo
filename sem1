# Q1) Set-up / Loading Packages

# Clear the environment
rm(list = ls())

# Set library paths (user and system-wide)
.libPaths(c(.libPaths(), "C:/Users/USERNAME/Documents/R/MyLibrary"))
.libPaths(c(.libPaths(), "C:/Program Files/R/R-4.1.3/library"))

# Check where packages will install:
.libPaths()

# Install all required packages in one go (skip if already installed)
packages <- c("rmarkdown", "quantmod", "QRM", "tidyverse", "PerformanceAnalytics",
              "timeSeries", "tseries", "roll", "car", "MASS", "extraDistr", 
              "rugarch", "rmgarch", "BEKKs", "dplyr")

# Install missing packages
install_if_missing <- function(pkg) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, lib = lib_path, dependencies = TRUE)
  }
}
invisible(lapply(packages, install_if_missing))

# Load all packages
invisible(lapply(packages, function(pkg) library(pkg, character.only = TRUE)))

##############################
# Q2) Understanding Basic R Commands
##############################

# Arithmetic and log
2^5
a = 2
b = 100
exp(a) + b / 10
result = exp(a) + b
cat("the answer is:", log(a), "or", result, "\n")



##############################
# Q3) Building, Indexing and Manipulating Matrices
##############################

# Empty matrix
A <- matrix(nrow = 3, ncol = 2)
A

# Define matrices
B <- matrix(c(3, 4, 5, 8), nrow = 2, byrow = TRUE)
B
C <- matrix(c(4, 4, 5, 7, 34, 2), nrow = 2, byrow = TRUE)
C

# Indexing
c_1c <- C[1,]  # First row
c_r1 <- C[,1]  # First column
c_21 <- C[2,1] # Element in row 2, column 1

# Transpose
C_t <- t(C)

# Special matrices
H <- matrix(0, nrow = 3, ncol = 4) # Zeros
I <- diag(5)                       # Identity
W <- matrix(1, nrow = 3, ncol = 1) # Ones column vector

# Inverse and multiplication
B_inv <- solve(B)
D <- B %*% C
V <- B %*% B_inv # Should return identity



##############################
# Q4) Importing / Exploring Financial Data
##############################

# Import dataset
setwd("C:/Users/tpd19wzu/Dropbox/Gus_stuff/teaching/__LSE/FM321/2024-25/Seminars/data_wrds")
data <- read.csv('crsp_seminar1.csv')

# Explore dataset
View(data)
dim(data)
head(data)
head(data$RET)
head(data[,6])
names(data)

# Unique identifiers
unique(data$PERMNO)
unique(data$TICKER)
unique(data$COMNAM)

# Filter for Citi
citi <- data[data$PERMNO == 70519,]
citi_df <- as.data.frame(data[data$PERMNO == 70519,])

# Summary checks
dim(citi)
head(citi)
tail(citi)
unique(citi$TICKER)

# Return calculations
highest_citi <- max(citi$RET) * 100
paste0("Highest return for Citi: ", highest_citi, "%")

lowest_citi <- min(citi$RET) * 100
paste0("Lowest return for Citi: ", lowest_citi , "%")



##############################
# Q5) Plotting Price Data
##############################

dev.new()
plot(citi$PRC, type = "l", main = "Price of Citi - Line")

dev.new()
plot(citi$PRC, type = "p", main = "Price of Citi - Points")

dev.new()
plot(citi$PRC, type = "b", main = "Price of Citi - Both")



##############################
# Q6) Implementing a Simple Random Walk
##############################

# Initialise
T <- 2000
p <- matrix(nrow = T, ncol = 1)
r <- matrix(nrow = T - 1, ncol = 1)
eps <- rnorm(n = T) # Normally distributed shocks

# Loop
for (t in 1:T) {
  if (t == 1) {
    p[t] <- 3 + eps[t]
  } else {
    p[t] <- p[t - 1] + eps[t]
    r[t] <- p[t] - p[t - 1]
  }
}

# Plot paths
dev.new()
plot(p, type = 'l', main = "Simulated Price Path")

dev.new()
plot(r, type = 'l', main = "Simulated Return Path")
